pipeline {
    agent any
    
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'deploy',url: 'https://github.com/espinoza6006/myinsuranceapp-williams.git'
            }
        }        
        stage('Requirements') {
            steps {
                echo 'Installing dependencies...'
                sh 'pip3 install -r requirements.txt'
                sh 'python3 project/init/init_db.py'
            }
        }
        stage('Unit/Integration tests') {
            steps {
                echo 'Unit/Integration...'
                sh 'python3 -m unittest discover -s tests/unit -v'
            }
        }        
        stage('Acceptance tests') {
            steps {
                echo 'Acceptance...'
                sh 'python3 -m unittest discover -s tests/acceptance-flask -v'
            }
        }     
        stage('Create image') {
            steps {
                echo 'creating image...'
                sh 'docker build -t espinoza6006/myinsuranceappwilliams:v8 -f dockerFile .'
                
            }
        } 
        stage('Publish image') {
            steps {
                echo 'pushing image..'
                withDockerRegistry([ credentialsId: "docker-hub-credentials", url: "" ]) {
                    sh 'docker push espinoza6006/myinsuranceappwilliams:v8'
                }
               
            }
        }
        stage('Apply Kubernetes ') {
            steps {
                withKubeConfig([credentialsId: 'k8-credentials']) {
                    sh 'kubectl apply -f kubernetes/1-myinsuranceapp_deployment_dockerHub.yaml'
                    sh 'kubectl apply -f kubernetes/2-myinsuranceapp_services_dockerHub.yaml'
                    sh 'kubectl port-forward service/myinsuranceappwilliams-service 5000:5050 &'
                }
            }
        }
        
        /* stage('External acceptance tests') {
            steps{
                echo 'External acceptance tests...'
                sh 'python3 -m unittest discover -s tests/acceptance-request -v'
            }
        } */
    }
    post {
        
        cleanup{
            echo 'post do this when cleanup...'
            //sh 'pkill -f "port-forward"'
            //deleteDir()
        }
    }
}